---
- name: Install and configure MariaDB on Ubuntu/Debian, run in Docker and create user
  hosts: web_servers  # Ensure this matches the group in your inventory
  become: true
  vars:
    ansible_python_interpreter: /usr/bin/python3  # Ensure we use Python 3

  tasks:
    # Step 1: Update apt cache
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes

    # Step 2: Install Docker on Ubuntu/Debian
    - name: Install Docker on Ubuntu/Debian
      ansible.builtin.apt:
        name: docker.io
        state: present

    # Step 3: Ensure Docker service is running and enabled
    - name: Start and enable Docker service
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: true

    # Step 4: Pull MariaDB Docker image
    - name: Pull MariaDB Docker image
      ansible.builtin.command:
        cmd: docker pull mariadb:latest

    # Step 5: Remove existing MariaDB container if it exists
    - name: Remove existing MariaDB container if it exists
      ansible.builtin.docker_container:
        name: mariadb_container
        state: absent
      ignore_errors: yes  # Continue execution if the container is not found

    # Step 6: Run MariaDB container with port binding
    - name: Run MariaDB in Docker container
      ansible.builtin.docker_container:
        name: mariadb_container
        image: mariadb:latest
        state: started
        restart_policy: always
        env:
          MYSQL_ROOT_PASSWORD: "{{ lookup('env', 'mysql_root_password') }}"
        networks:
          - name: host  # Optional: Ensure correct networking mode is used

    # Step 7: Wait for MariaDB to accept connections
    - name: Wait for MariaDB to accept connections
      ansible.builtin.shell: |
        while ! docker exec mariadb_container mysqladmin -u root -p{{ lookup('env', 'mysql_root_password') }} ping --silent; do
          echo "Waiting for MariaDB to start..."
          sleep 5
        done
      retries: 10
      delay: 5

    # Step 8: Create MySQL user inside the container
    - name: Create MySQL user inside the container
      ansible.builtin.shell: |
        docker exec -i mariadb_container mysql -u root -p{{ lookup('env', 'mysql_root_password') }} -h 127.0.0.1 -e "CREATE USER '{{ mysql_user }}'@'%' IDENTIFIED BY '{{ mysql_password }}';"
        docker exec -i mariadb_container mysql -u root -p{{ lookup('env', 'mysql_root_password') }} -h 127.0.0.1 -e "GRANT ALL PRIVILEGES ON *.* TO '{{ mysql_user }}'@'%';"
        docker exec -i mariadb_container mysql -u root -p{{ lookup('env', 'mysql_root_password') }} -h 127.0.0.1 -e "FLUSH PRIVILEGES;"

    # Step 9: Verify MySQL user creation (Optional)
    - name: Verify MySQL user creation inside the container
      ansible.builtin.shell: |
        docker exec -i mariadb_container mysql -u root -p{{ lookup('env', 'mysql_root_password') }} -h 127.0.0.1 -e "SELECT User, Host FROM mysql.user WHERE User = '{{ mysql_user }}';"
