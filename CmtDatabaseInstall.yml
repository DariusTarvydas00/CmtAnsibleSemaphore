---
- name: Install and configure MariaDB on Ubuntu/Debian, run in Docker and create user
  hosts: web_servers  # Ensure this matches the group in your inventory
  become: true
  vars:
    ansible_python_interpreter: /usr/bin/python3  # Ensure we use Python 3

  tasks:
    # Step 1: Update apt cache
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes

    # Step 2: Install Docker on Ubuntu/Debian
    - name: Install Docker on Ubuntu/Debian
      ansible.builtin.apt:
        name: docker.io
        state: present

    # Step 3: Ensure Docker service is running and enabled
    - name: Start and enable Docker service
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: true

    # Step 4: Pull MariaDB Docker image
    - name: Pull MariaDB Docker image
      ansible.builtin.command:
        cmd: docker pull mariadb:latest

    # Step 5: Remove existing MariaDB container if it exists
    - name: Remove existing MariaDB container if it exists
      ansible.builtin.docker_container:
        name: mariadb_container
        state: absent
      ignore_errors: yes  # Continue execution if the container is not found

    # Step 6: Run MariaDB container with port binding
    - name: Run MariaDB in Docker container
      ansible.builtin.docker_container:
        name: mariadb_container
        image: mariadb:latest
        state: started
        restart_policy: always
        env:
          MYSQL_ROOT_PASSWORD: "{{ lookup('env', 'mysql_root_password') }}"
        networks:
          - name: host  # Optional: Ensure correct networking mode is used

    # Step 7: Check if the container is running
    - name: Check MariaDB container status
      ansible.builtin.command:
        cmd: docker ps -f name=mariadb_container --format '{{.Status}}'
      register: container_status
      failed_when: container_status.stdout != "Up"

    # Step 8: Fetch container logs before waiting
    - name: Fetch MariaDB container logs before waiting
      ansible.builtin.shell: docker logs mariadb_container
      register: mariadb_logs_before_wait
      failed_when: false

    - name: Show MariaDB logs before wait
      debug:
        var: mariadb_logs_before_wait.stdout

    # Step 9: Wait for MariaDB to accept connections
    - name: Wait for MariaDB to accept connections (retries and debug)
      ansible.builtin.shell: |
        echo "Checking if MariaDB is accepting connections..."
        until docker exec mariadb_container mysqladmin -u root -p{{ lookup('env', 'mysql_root_password') }} ping --silent; do
          echo "MariaDB is not ready yet, retrying..."
          sleep 5
        done
        echo "MariaDB is now ready to accept connections."
      retries: 12
      delay: 10
      register: mariadb_wait
      failed_when: mariadb_wait.rc != 0

    # Step 10: Check the MariaDB container logs (for troubleshooting)
    - name: Check MariaDB container logs after waiting
      ansible.builtin.shell: docker logs mariadb_container
      register: mariadb_logs_after_wait
      failed_when: false

    - name: Show MariaDB logs after wait
      debug:
        var: mariadb_logs_after_wait.stdout

    # Step 11: Create MySQL user inside the container
    - name: Create MySQL user inside the container
      ansible.builtin.shell: |
        docker exec -i mariadb_container mysql -
