---
- name: Install and configure MariaDB on Ubuntu/Debian, run in Docker and create user
  hosts: web_servers  # Ensure this matches the group in your inventory
  become: true
  vars:
    ansible_python_interpreter: /usr/bin/python3  # Ensure we use Python 3

  tasks:

    # Step 1: Update apt cache
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes

    # Step 2: Install Docker on Ubuntu/Debian
    - name: Install Docker on Ubuntu/Debian
      ansible.builtin.apt:
        name: docker.io
        state: present

    # Step 3: Ensure Docker service is running and enabled
    - name: Start and enable Docker service
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: true

    # Step 4: Pull MariaDB Docker image
    - name: Pull MariaDB Docker image
      ansible.builtin.command:
        cmd: docker pull mariadb:latest

    # Step 5: Remove existing MariaDB container if it exists
    - name: Remove existing MariaDB container if it exists
      ansible.builtin.docker_container:
        name: mariadb_container
        state: absent
      ignore_errors: yes  # Continue execution if the container is not found

    # Step 6: Run MariaDB container with port binding
    - name: Run MariaDB in Docker container
      ansible.builtin.docker_container:
        name: mariadb_container
        image: mariadb:latest
        state: started
        restart_policy: always
        env:
          MYSQL_ROOT_PASSWORD: "{{ lookup('env', 'mysql_root_password') }}"
        networks:
          - name: host  # Optional: Ensure correct networking mode is used

    # Step 7: Install firewalld (if needed) and start the service
    - name: Install firewalld (Ubuntu/Debian)
      ansible.builtin.apt:
        name: firewalld
        state: present

    - name: Start and enable firewalld
      ansible.builtin.systemd:
        name: firewalld
        state: started
        enabled: true

    # Step 8: Allow SSH traffic through the firewall
    - name: Allow SSH traffic through firewalld
      ansible.builtin.command:
        cmd: firewall-cmd --zone=public --add-port=22/tcp --permanent

    # Step 9: Allow MySQL traffic through the firewall
    - name: Allow MySQL traffic through firewalld
      ansible.builtin.command:
        cmd: firewall-cmd --zone=public --add-port=3306/tcp --permanent

    # Step 10: Reload firewalld to apply changes
    - name: Reload firewalld to apply changes
      ansible.builtin.command:
        cmd: firewall-cmd --reload

    # Step 11: Fetch MySQL root username and password from Semaphore Environment Variables
    - name: Set MySQL root username and password from environment variables
      ansible.builtin.set_fact:
        mysql_root_user: "{{ lookup('env', 'mysql_root_username') }}"  # Get MySQL root username from environment variable
        mysql_root_password: "{{ lookup('env', 'mysql_root_password') }}"  # Get MySQL root password from environment variable

    # Step 12: Wait for MariaDB to be ready to accept connections
    - name: Wait for MariaDB to accept connections
      ansible.builtin.wait_for:
        host: localhost
        port: 3306
        state: started
        delay: 10
        timeout: 60

    # Step 13: Check MariaDB container status
    - name: Check MariaDB container status
      ansible.builtin.command:
        cmd: "docker ps -f name=mariadb_container --format '{{ '{{' }}.Status{{ '}}' }}'"
      register: container_status
      failed_when: container_status.stdout != "Up"
      changed_when: false  # We don't want this task to change anything

    # Step 14: Create MySQL user inside the Docker container
    - name: Create MySQL user inside the container
      ansible.builtin.shell: |
        docker exec -i mariadb_container mysql -u root -p{{ mysql_root_password }} -e "CREATE USER '{{ mysql_user }}'@'%' IDENTIFIED BY '{{ mysql_password }}';"
        docker exec -i mariadb_container mysql -u root -p{{ mysql_root_password }} -e "GRANT ALL PRIVILEGES ON *.* TO '{{ mysql_user }}'@'%';"
        docker exec -i mariadb_container mysql -u root -p{{ mysql_root_password }} -e "FLUSH PRIVILEGES;"

    # Step 15: Verify MySQL user creation (Optional)
    - name: Verify MySQL user creation inside the container
      ansible.builtin.shell: |
        docker exec -i mariadb_container mysql -u root -p{{ mysql_root_password }} -e "SELECT User, Host FROM mysql.user WHERE User = '{{ mysql_user }}';"
