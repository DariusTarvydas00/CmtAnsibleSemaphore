---
- name: Setup MariaDB with Docker and prerequisites
  hosts: all
  become: true
  become_method: sudo
  become_user: root
  vars:
    ansible_sudo_pass: "{{ lookup('env', 'USER_PASSWORD') }}"
    mysql_container_name: "mariadb_server"
    mysql_root_password: "{{ lookup('env', 'MYSQL_ROOT_PASSWORD') }}"
    mysql_database: "{{ lookup('env', 'MYSQL_DATABASE') }}"
    mysql_user: "{{ lookup('env', 'MYSQL_USER') }}"
    mysql_user_password: "{{ lookup('env', 'MYSQL_USER_PASSWORD') }}"
    mariadb_image: "mariadb:latest"  # Official MariaDB image
    mysql_network_name: "mysql_network"  # Custom network for MySQL
    ansible_python_interpreter: /usr/bin/python3

  tasks:
    # Update apt package cache
    - name: Update apt package cache
      apt:
        update_cache: yes

    # Install system packages for MySQL and Python setup
    - name: Install system packages for MySQL and Python setup
      apt:
        name:
          - python3-pip
          - python3-dev
          - pkg-config  # Required for building mysqlclient
          - build-essential  # Compiler tools needed for mysqlclient
          - python3-venv  # Required to create a virtual environment
          - default-libmysqlclient-dev  # Use the default MySQL client package
        state: present

    # Create a virtual environment for Python packages
    - name: Create a virtual environment for Python packages
      shell: python3 -m venv /opt/myenv
      args:
        creates: /opt/myenv/bin/activate  # Ensures the virtual environment is created only once
      become: true

    # Install Python packages in the virtual environment
    - name: Install Python packages in the virtual environment
      pip:
        name: "{{ item }}"
        state: present
        executable: /opt/myenv/bin/pip
      loop:
        - PyMySQL
        - mysqlclient

    # Pull the latest MariaDB Docker image
    - name: Pull the latest MariaDB Docker image
      docker_image:
        name: "{{ mariadb_image }}"
        source: pull

    # Create a Docker volume for MySQL data
    - name: Create a Docker volume for MySQL data
      docker_volume:
        name: mysql_data
        state: present

    # Create custom Docker network
    - name: Create custom Docker network
      docker_network:
        name: "{{ mysql_network_name }}"
        driver: bridge
        state: present

    # Check if MySQL container exists
    - name: Check if MySQL container exists
      docker_container_info:
        name: "{{ mysql_container_name }}"
      register: mysql_container_status
      ignore_errors: true

    # Remove existing MySQL container if it exists
    - name: Remove the existing MySQL container if it exists
      docker_container:
        name: "{{ mysql_container_name }}"
        state: absent
      when: mysql_container_status is defined and
        mysql_container_status.containers is defined and
        mysql_container_status.containers | length > 0

    # Create and start the MySQL container
    - name: Create and start the MySQL container
      docker_container:
        name: "{{ mysql_container_name }}"
        image: "{{ mariadb_image }}"
        state: started
        restart_policy: unless-stopped
        env:
          MYSQL_ROOT_PASSWORD: "{{ mysql_root_password }}"
          MYSQL_DATABASE: "{{ mysql_database }}"
          MYSQL_USER: "{{ mysql_user }}"
          MYSQL_PASSWORD: "{{ mysql_user_password }}"
        exposed_ports:
          - "3306"
        published_ports:
          - "3306:3306"
        volumes:
          - mysql_data:/var/lib/mysql  # Volume for MySQL data
        networks:
          - name: "{{ mysql_network_name }}"  # Attach to custom network
        command: |
          bash -c "
            apt-get update &&
            apt-get install -y mariadb-server &&
            service mysql start &&
            tail -f /dev/null"  # Keeps container running after starting MariaDB

    # Wait for MySQL to be accessible
    - name: Wait for MySQL to be accessible
      wait_for:
        host: "localhost"
        port: 3306
        delay: 10
        timeout: 60
        state: started

    # Check if MySQL container is running
    - name: Check if MySQL container is running
      command: docker ps -q -f name={{ mysql_container_name }}
      register: mysql_ps_check
      retries: 5
      delay: 10
      until:
        - mysql_ps_check.stdout | length > 0

    # Show MySQL container status
    - name: Show MySQL container status
      debug:
        msg: "MySQL container is running with container ID: {{ mysql_ps_check.stdout }}"

    # Verify MySQL is accessible
    - name: Verify MySQL is accessible
      mysql_db:
        login_user: root
        login_password: "{{ mysql_root_password }}"
        name: "{{ mysql_database }}"
        state: present
      register: mysql_check

    # Show MySQL check result
    - name: Show MySQL check result
      debug:
        msg: "MySQL database status: {{ mysql_check }}"
