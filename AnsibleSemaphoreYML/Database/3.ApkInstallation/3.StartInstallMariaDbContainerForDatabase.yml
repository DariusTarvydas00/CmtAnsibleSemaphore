---
- name: Setup MariaDB with Docker and prerequisites
  hosts: all
  become: true
  become_method: sudo
  become_user: root
  vars:
    ansible_sudo_pass: "{{ lookup('env', 'USER_PASSWORD') }}"
    mariadb_container_name: "mariadb_server"
    mariadb_root_password: "{{ lookup('env', 'MARIADB_ROOT_PASSWORD') }}"
    mariadb_database: "{{ lookup('env', 'MARIADB_DATABASE') }}"
    mariadb_user: "{{ lookup('env', 'MARIADB_USER') }}"
    mariadb_user_password: "{{ lookup('env', 'MARIADB_USER_PASSWORD') }}"
    mariadb_image: "mariadb:latest"
    mariadb_network_name: "mariadb_network"  # Custom network for MariaDB

  tasks:
    # Update apt/yum caches based on OS family
    - name: Update apt package cache
      apt:
        update_cache: yes
      when: ansible_facts.os_family == "Debian"

    - name: Update yum package cache
      yum:
        name: "*"
        state: latest
      when: ansible_facts.os_family == "RedHat"

    # Install prerequisites for MySQL and Python packages on Debian/Ubuntu
    - name: Install prerequisites for MySQL and Python packages on Debian/Ubuntu
      when: ansible_facts.os_family == "Debian"
      apt:
        name:
          - python3-pip
          - python3-dev
          - build-essential
          - libmariadbclient-dev  # Directly use the package name for Debian
        state: present

    # Install prerequisites for MySQL and Python packages on RedHat/CentOS
    - name: Install prerequisites for MySQL and Python packages on RedHat/CentOS
      when: ansible_facts.os_family == "RedHat"
      yum:
        name:
          - python3-pip
          - python3-devel
          - gcc
          - mariadb-devel  # Directly use the package name for RedHat
        state: present

    # Install the mysqlclient Python package using pip
    - name: Install mysqlclient Python package
      pip:
        name: mysqlclient  # Directly use the package name for pip
        state: present
        executable: pip3

    # Pull the latest MariaDB Docker image
    - name: Pull the latest MariaDB Docker image
      docker_image:
        name: "{{ mariadb_image }}"
        source: pull

    # Create a Docker volume for MariaDB data
    - name: Create a Docker volume for MariaDB data
      docker_volume:
        name: mariadb_data
        state: present

    # Create custom Docker network
    - name: Create custom Docker network
      docker_network:
        name: "{{ mariadb_network_name }}"
        driver: bridge
        state: present

    # Check if MariaDB container exists
    - name: Check if MariaDB container exists
      docker_container_info:
        name: "{{ mariadb_container_name }}"
      register: mariadb_container_status
      ignore_errors: true

    # Remove existing MariaDB container if it exists
    - name: Remove the existing MariaDB container if it exists
      docker_container:
        name: "{{ mariadb_container_name }}"
        state: absent
      when: mariadb_container_status is defined and
        mariadb_container_status.containers is defined and
        mariadb_container_status.containers | length > 0

    # Create and start the MariaDB container
    - name: Create and start the MariaDB container
      docker_container:
        name: "{{ mariadb_container_name }}"
        image: "{{ mariadb_image }}"
        state: started
        restart_policy: unless-stopped
        env:
          MYSQL_ROOT_PASSWORD: "{{ mariadb_root_password }}"
          MYSQL_DATABASE: "{{ mariadb_database }}"
          MYSQL_USER: "{{ mariadb_user }}"
          MYSQL_PASSWORD: "{{ mariadb_user_password }}"
        exposed_ports:
          - "3306"
        published_ports:
          - "3306:3306"
        volumes:
          - mariadb_data:/var/lib/mysql  # Volume is defined at the container level
        networks:
          - name: "{{ mariadb_network_name }}"  # Ensure it's attached to the custom network

    # Wait for MariaDB to be accessible
    - name: Wait for MariaDB to be accessible
      wait_for:
        host: "localhost"
        port: 3306
        delay: 10
        timeout: 60
        state: started

    # Check if MariaDB container is running
    - name: Check if MariaDB container is running
      command: docker ps -q -f name={{ mariadb_container_name }}
      register: mariadb_ps_check
      retries: 5
      delay: 10
      until:
        - mariadb_ps_check.stdout | length > 0

    # Show MariaDB container status
    - name: Show MariaDB container status
      debug:
        msg: "MariaDB container is running with container ID: {{ mariadb_ps_check.stdout }}"

    # Verify MariaDB is accessible
    - name: Verify MariaDB is accessible
      mysql_db:
        login_user: root
        login_password: "{{ mariadb_root_password }}"
        name: "{{ mariadb_database }}"
        state: present
      register: mariadb_check

    # Show the result of the MariaDB database check
    - name: Show MariaDB check result
      debug:
        msg: "MariaDB database status: {{ mariadb_check }}"
