---
- name: Create User Using Secure Password from Vault
  hosts: all
  become: true

  tasks:
    - name: Fetch username and password from environment variables
      set_fact:
        user_name: "{{ lookup('env', 'USER_NAME') }}"
        user_password: "{{ lookup('env', 'USER_PASSWORD') }}"
      register: username_password_fetch_result
        
    # Check if the first task (username fetch) failed, and skip all other tasks if it did
    - name: Skip further tasks if fetching username/password failed
      debug:
        msg: "Skipping further tasks as the first task failed."
      when: username_password_fetch_result.failed  # If the first task failed, we skip the others
      ignore_errors: true

    - name: Check if the user already exists
      getent:
        database: passwd
        key: "{{ user_name }}"
      register: user_exists
      ignore_errors: true
      when: user_name is defined  # Only check if user_name is defined

    - name: Create user if it does not exist
      user:
        name: "{{ user_name }}"
        password: "{{ user_password }}"
        shell: /bin/bash
        create_home: yes
        state: present
      when: user_exists.failed  # Only create the user if it doesn't exist

    - name: Inform if user creation was skipped
      debug:
        msg: "User {{ user_name }} already exists. Skipping user creation."
      when: user_exists.failed == false

    - name: Ensure the sudoers directory exists
      file:
        path: "/etc/sudoers.d"
        state: directory
        mode: '0755'
      when: not sudoers_file.stat.exists  # Only check if the sudoers file directory doesn't exist

    - name: Check if the sudoers file exists for the user
      stat:
        path: "/etc/sudoers.d/{{ user_name }}"
      register: sudoers_file
      when: user_exists.failed  # Only check if user creation is successful or user doesn't exist

    - name: Create sudoers file if it does not exist
      file:
        path: "/etc/sudoers.d/{{ user_name }}"
        state: touch
        mode: '0440'
      when: not sudoers_file.stat.exists  # Only create the sudoers file if it doesn't exist

    - name: Grant sudo permissions to the user
      lineinfile:
        path: "/etc/sudoers.d/{{ user_name }}"
        state: present
        regexp: '^{{ user_name }}'
        line: '{{ user_name }} ALL=(ALL) NOPASSWD: ALL'
      when: sudoers_file.stat.exists  # Only grant sudo permissions if the sudoers file exists

    - name: Set proper ownership and permissions for the sudoers file (chmod 440)
      file:
        path: "/etc/sudoers.d/{{ user_name }}"
        mode: '0440'
        state: file
      when: sudoers_file.stat.exists  # Only set ownership and permissions if the sudoers file exists

    - name: Set proper ownership and permissions for home directory
      file:
        path: "/home/{{ user_name }}"
        owner: "{{ user_name }}"
        group: "{{ user_name }}"
        mode: '0755'
        state: directory
      when: user_exists.failed  # Only set ownership and permissions if the user was created

    - name: Confirm user creation (or existence)
      debug:
        msg: "User {{ user_name }} already exists or has been created successfully with a pre-hashed password."
      when: user_exists.failed == false or user_exists.failed == true  # Display message whether user exists or was created
