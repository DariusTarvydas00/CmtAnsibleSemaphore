---
- name: Configure Server Security, Setup Users, MSSQL, and Firewall
  hosts: all
  become: true
  vars:
    user_name: "{{ lookup('env', 'USER_NAME') }}"  # Fetch username from environment
    user_password: "{{ lookup('env', 'USER_PASSWORD') }}"  # Fetch password from environment
    mssql_sa_password: "{{ lookup('env', 'MSSQL_ROOT_PASSWORD') }}"  # SA password stored in environment
    allowed_ips:
      - "{{ lookup('env', 'AllOWED_IP_1') }}"  # List of allowed IP addresses for MSSQL
      - "{{ lookup('env', 'AllOWED_IP_2') }}"
      - "{{ lookup('env', 'AllOWED_IP_3') }}"
    mssql_image_name: "mcr.microsoft.com/mssql/server:2022-latest"  # MSSQL Docker image
    mssql_container_name: "mssql-server-container"
    mssql_data_volume: "mssql-data"
    mssql_port: 1433  # MSSQL port
    mssql_databases:  # Databases to be created
      - Cmt_Database
      - Accounts
      - Authentication
      - CabalCash
      - CabalGuild
      - EventData
      - Netcafebilling
      - Server01

  tasks:
    # Step 1: Ensure necessary packages are installed
    - name: Install required packages
      package:
        name:
          - sudo
          - docker.io
          - fail2ban
        state: present
        update_cache: yes

    # Step 2: Disable root login
    - name: Disable root login
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PermitRootLogin'
        line: 'PermitRootLogin no'
      notify:
        - Restart SSH service

    # Step 3: Check if the user already exists
    - name: Check if the user already exists
      getent:
        database: passwd
        key: "{{ user_name }}"
      register: user_exists
      ignore_errors: true  # Prevent failure if the user doesn't exist

    # Step 4: Create the user if it doesn't exist
    - name: Create user if it does not exist
      user:
        name: "{{ user_name }}"
        password: "{{ user_password | password_hash('sha512') }}"
        shell: /bin/bash
        create_home: yes
        state: present
      when: user_exists.failed or user_exists is not defined

    # Step 5: Ensure the sudoers.d directory exists and has proper permissions
    - name: Ensure the sudoers.d directory exists and has proper permissions
      file:
        path: /etc/sudoers.d
        state: directory
        mode: '0755'
        owner: root
        group: root

    # Step 6: Grant sudo access to the user with validation
    - name: Grant sudo access to the user with validation
      copy:
        content: "{{ user_name }} ALL=(ALL) NOPASSWD: ALL\n"
        dest: "/etc/sudoers.d/{{ user_name }}"
        mode: '0440'
        owner: root
        group: root
        validate: '/usr/sbin/visudo -cf %s'  # Adjust path if necessary

    # Step 7: Set proper permissions for the home directory
    - name: Set proper ownership and permissions for the user's home directory
      file:
        path: "/home/{{ user_name }}"
        owner: "{{ user_name }}"
        group: "{{ user_name }}"
        mode: '0700'

    # Other tasks for MSSQL, Fail2Ban, and Firewall...
    # (Retain the rest of your playbook for MSSQL, TCP SYN cookies, Fail2Ban, etc.)
  
  handlers:
    # Restart SSH service to apply changes
    - name: Restart SSH service
      service:
        name: ssh
        state: restarted
