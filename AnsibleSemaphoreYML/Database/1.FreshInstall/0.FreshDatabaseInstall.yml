  tasks:
    # Step 3: Disable root login for SSH
    - name: Disable root login
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PermitRootLogin'
        line: 'PermitRootLogin no'
      notify:
        - Restart SSH service

#    # Step 5: Grant sudo access to the user with validation
#    - name: Ensure sudoers.d directory exists and has proper permissions
#      file:
#        path: /etc/sudoers.d
#        state: directory
#        mode: '0755'
#        owner: root
#        group: root
#
#    - name: Grant sudo access to the user with validation
#      copy:
#        content: "{{ user_name }} ALL=(ALL) NOPASSWD: ALL\n"
#        dest: "/etc/sudoers.d/{{ user_name }}"
#        mode: '0440'
#        owner: root
#        group: root
#        validate: '/usr/sbin/visudo -cf %s'

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: true

    # Step 7: Run MSSQL Docker Container
    - name: Run MSSQL Docker Container
      docker_container:
        name: "{{ mssql_container_name }}"
        image: "{{ mssql_image_name }}"
        state: started
        restart_policy: always
        exposed_ports:
          - "{{ mssql_port }}"
        ports:
          - "{{ mssql_port }}:{{ mssql_port }}"
        env:
          ACCEPT_EULA: "Y"
          SA_PASSWORD: "{{ mssql_password }}"
        volumes:
          - "{{ mssql_data_volume }}:/var/opt/mssql"

    # Step 8: Install mssql-tools inside the container
    - name: Install mssql-tools inside the container
      command: >
        docker exec -u root -i {{ mssql_container_name }} bash -c
        "apt-get update && 
        ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev && 
        echo 'export PATH=$PATH:/opt/mssql-tools/bin' >> ~/.bashrc && 
        source ~/.bashrc"

    # Step 9: Wait for MSSQL container to be ready
    - name: Wait for MSSQL container to be ready
      wait_for:
        port: "{{ mssql_port }}"
        host: "127.0.0.1"
        state: started
        timeout: 300

    # Step 10: Configure MSSQL firewall rules for allowed IPs
    - name: Add firewall rule for allowed IPs
      command: >
        firewall-cmd --zone=public --add-rich-rule="rule family='ipv4' source address='{{ item }}' port protocol='tcp' port='{{ mssql_port }}' accept" --permanent
      with_items: "{{ allowed_ips }}"
      notify:
        - Reload firewalld

    - name: Deny all other MSSQL access
      command: firewall-cmd --zone=public --add-rich-rule='rule family="ipv4" service name="mssql" reject' --permanent
      notify:
        - Reload firewalld

    # Step 11: Create a new MSSQL admin user with sysadmin role
    - name: Create new MSSQL admin user
      command: >
        docker exec -i {{ mssql_container_name }} /opt/mssql-tools/bin/sqlcmd
        -S localhost -U sa -P "{{ mssql_password }}" 
        -Q "CREATE LOGIN {{ new_mssql_admin_user }} WITH PASSWORD='{{ new_mssql_admin_password }}'; ALTER SERVER ROLE sysadmin ADD MEMBER {{ new_mssql_admin_user }};"
      ignore_errors: yes
      register: mssql_user_creation_result

    - name: Check if the MSSQL user creation was successful
      debug:
        msg: "MSSQL Admin user {{ new_mssql_admin_user }} created successfully."
      when: mssql_user_creation_result.rc == 0

    - name: Fail if MSSQL admin user creation failed
      fail:
        msg: "Failed to create MSSQL Admin user {{ new_mssql_admin_user }}."
      when: mssql_user_creation_result.rc != 0

    # Step 12: Disable the 'sa' account in MSSQL
    - name: Disable the 'sa' account in MSSQL
      command: >
        docker exec -i {{ mssql_container_name }} /opt/mssql-tools/bin/sqlcmd
        -S localhost -U sa -P "{{ mssql_password }}" 
        -Q "ALTER LOGIN sa DISABLE"
      ignore_errors: yes

    # Step 13: Configure SSH settings
    - name: Set SSH to use a non-standard port
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?Port'
        line: "Port {{ ssh_port }}"

    - name: Set maxauthtries to 3 for SSH
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?MaxAuthTries'
        line: 'MaxAuthTries 3'

    - name: Limit SSH access to specific IPs
      lineinfile:
        path: /etc/hosts.allow
        line: "sshd: {{ item }}"
        create: yes
      with_items: "{{ allowed_ips }}"

    - name: Restart SSH service
      service:
        name: ssh
        state: restarted

    # Step 14: Configure fail2ban for SSH and MSSQL
    - name: Configure fail2ban for SSH
      copy:
        dest: /etc/fail2ban/jail.d/ssh.conf
        content: |
          [sshd]
          enabled  = true
          port     = {{ ssh_port }}
          filter   = sshd
          logpath  = /var/log/auth.log
          maxretry = 3
          bantime  = 600
      notify:
        - Restart Fail2Ban

    - name: Configure fail2ban for MSSQL
      copy:
        dest: /etc/fail2ban/jail.d/mssql.conf
        content: |
          [mssql]
          enabled  = true
          filter   = mssql-auth
          action   = iptables[name=MSSQL, port=1433, protocol=tcp]
          logpath  = /var/log/mssql/*.log
          maxretry = 3
          bantime  = 600
      notify:
        - Restart Fail2Ban

    # Step 15: Rate limiting and SYN flood protection using iptables
    - name: Rate limit SSH connections using iptables
      command: >
        iptables -A INPUT -p tcp --dport {{ ssh_port }} -m state --state NEW -m recent --set
      ignore_errors: yes

    - name: Limit incoming MSSQL connections using iptables
      command: >
        iptables -A INPUT -p tcp --dport 1433 -m state --state NEW -m recent --set
      ignore_errors: yes

    - name: Configure SYN flood protection via iptables
      command: >
        iptables -A INPUT -p tcp --syn -m limit --limit 1/s --limit-burst 5 -j ACCEPT
      ignore_errors: yes

    # Step 16: Apply system hardening via AIDE (Advanced Intrusion Detection)
    - name: Initialize AIDE
      command: aideinit
      ignore_errors: yes

    - name: Configure AIDE system configuration
      copy:
        src: /etc/aide/aide.conf
        dest: /etc/aide/aide.conf
        owner: root
        group: root
        mode: 0644

    # Step 17: Backup configuration for MSSQL and important files
    - name: Backup MSSQL databases
      command: >
        docker exec -i {{ mssql_container_name }} /opt/mssql-tools/bin/sqlcmd 
        -S localhost -U sa -P "{{ mssql_password }}"
        -Q "BACKUP DATABASE {{ item }} TO DISK = '/var/opt/mssql/backup/{{ item }}_backup.bak'"
      with_items: "{{ mssql_databases }}"

    - name: Backup important system files
      synchronize:
        src: "/etc/ /root/"
        dest: "/mnt/backups/"
        mode: pull
        recursive: yes

  handlers:
    - name: Reload firewalld
      command: firewall-cmd --reload

    - name: Restart SSH service
      service:
        name: ssh
        state: restarted

    - name: Restart Fail2Ban
      service:
        name: fail2ban
        state: restarted
