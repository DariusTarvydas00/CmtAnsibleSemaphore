---
- name: Configure Server Security, Setup Users, MSSQL, and Firewall
  hosts: all
  become: true
  vars:
    # Fetch required environment variables
    user_name: "{{ lookup('env', 'USER_NAME') }}"  # Fetch username from environment
    user_password: "{{ lookup('env', 'USER_PASSWORD') }}"  # Fetch password from environment
    mssql_sa_password: "{{ lookup('env', 'MSSQL_ROOT_PASSWORD') }}"  # SA password stored in environment
    allowed_ips:
      - "{{ lookup('env', 'ALLOWED_IP_1') }}"
      - "{{ lookup('env', 'ALLOWED_IP_2') }}"
      - "{{ lookup('env', 'ALLOWED_IP_3') }}"
    mssql_image_name: "mcr.microsoft.com/mssql/server:2022-latest"  # MSSQL Docker image
    mssql_container_name: "mssql-server-container"
    mssql_data_volume: "mssql-data"
    mssql_port: 1433  # MSSQL port
    mssql_databases:  # Databases to be created
      - Cmt_Database
      - Accounts
      - Authentication
      - CabalCash
      - CabalGuild
      - EventData
      - Netcafebilling
      - Server01

  tasks:
    # Step 1: Ensure all required environment variables are set
    - name: Ensure all required environment variables are set
      fail:
        msg: "Required environment variables (USER_NAME, USER_PASSWORD, MSSQL_ROOT_PASSWORD, ALLOWED_IP_1, ALLOWED_IP_2, ALLOWED_IP_3) are missing."
      when:
        - user_name is not defined
        - user_password is not defined
        - mssql_sa_password is not defined
        - allowed_ips is not defined

    # Step 2: Validate user password strength
    - name: Validate user password strength
      assert:
        that:
          - user_password | length >= 12
          - user_password | regex_search('[A-Z]')  # At least one uppercase letter
          - user_password | regex_search('[a-z]')  # At least one lowercase letter
          - user_password | regex_search('[0-9]')  # At least one numeric digit
          - user_password | regex_search('[\\W_]')  # At least one special character


    # Step 3: Disable root login for SSH
    - name: Disable root login
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PermitRootLogin'
        line: 'PermitRootLogin no'
      notify:
        - Restart SSH service

    # Step 4: Check if the user already exists and create if not
    - name: Check if the user already exists
      getent:
        database: passwd
        key: "{{ user_name }}"
      register: user_exists
      ignore_errors: true

    - name: Create user if it does not exist
      user:
        name: "{{ user_name }}"
        password: "{{ user_password | password_hash('sha512') }}"
        shell: /bin/bash
        create_home: yes
        state: present
      when: user_exists.failed or user_exists is not defined

    # Step 5: Grant sudo access to the user with validation
    - name: Ensure sudoers.d directory exists and has proper permissions
      file:
        path: /etc/sudoers.d
        state: directory
        mode: '0755'
        owner: root
        group: root

    - name: Grant sudo access to the user with validation
      copy:
        content: "{{ user_name }} ALL=(ALL) NOPASSWD: ALL\n"
        dest: "/etc/sudoers.d/{{ user_name }}"
        mode: '0440'
        owner: root
        group: root
        validate: '/usr/sbin/visudo -cf %s'

    # Step 6: Install necessary packages including Docker
    - name: Install required packages
      apt:
        name:
          - sudo
          - docker.io
          - fail2ban
        state: present
        update_cache: yes

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: true

    # Step 7: Run MSSQL Docker Container
    - name: Run MSSQL Docker Container
      docker_container:
        name: "{{ mssql_container_name }}"
        image: "{{ mssql_image_name }}"
        state: started
        restart_policy: always
        exposed_ports:
          - "{{ mssql_port }}"
        ports:
          - "{{ mssql_port }}:{{ mssql_port }}"
        env:
          ACCEPT_EULA: "Y"
          SA_PASSWORD: "{{ mssql_sa_password }}"
        volumes:
          - "{{ mssql_data_volume }}:/var/opt/mssql"

    # Step 8: Wait for MSSQL container to be ready
    - name: Wait for MSSQL container to be ready
      wait_for:
        port: "{{ mssql_port }}"
        host: "127.0.0.1"
        state: started
        timeout: 300

    # Step 9: Configure MSSQL firewall rules for allowed IPs
    - name: Add firewall rule for allowed IPs
      command: >
        firewall-cmd --zone=public --add-rich-rule="rule family='ipv4' source address='{{ item }}' port protocol='tcp' port='{{ mssql_port }}' accept" --permanent
      with_items: "{{ allowed_ips }}"
      notify:
        - Reload firewalld

    - name: Deny all other MSSQL access
      command: firewall-cmd --zone=public --add-rich-rule='rule family="ipv4" service name="mssql" reject' --permanent
      notify:
        - Reload firewalld

    # Step 10: Install and configure Fail2Ban
    - name: Configure Fail2Ban for MSSQL
      copy:
        dest: /etc/fail2ban/jail.d/mssql.conf
        content: |
          [mssql]
          enabled  = true
          filter   = mssql-auth
          action   = iptables[name=MSSQL, port=1433, protocol=tcp]
          logpath  = /var/log/mssql/*.log
          maxretry = 3
          bantime  = 600
      notify:
        - Restart Fail2Ban

    # Step 11: Enable TCP SYN cookies for flood protection
    - name: Enable TCP SYN cookies
      sysctl:
        name: net.ipv4.tcp_syncookies
        value: 1
        state: present
        reload: yes

    - name: Make TCP SYN cookies setting persistent
      lineinfile:
        path: /etc/sysctl.conf
        line: "net.ipv4.tcp_syncookies = 1"
        create: yes
        state: present
      notify:
        - Reload sysctl

  handlers:
    - name: Restart SSH service
      service:
        name: ssh
        state: restarted

    - name: Reload firewalld
      service:
        name: firewalld
        state: reloaded

    - name: Restart Fail2Ban
      service:
        name: fail2ban
        state: restarted

    - name: Reload sysctl
      command: sysctl -p
      become: true
