---
- name: Run MSSQL Docker in Semaphore
  hosts: all
  become: true

  vars:
    mssql_image_name: "mcr.microsoft.com/mssql/server:2022-latest"  # Pre-built MSSQL image from Microsoft
    mssql_container_name: "mssql-server-container"
    mssql_sa_password: "{{ lookup('env', 'MARIADB_ROOT_PASSWORD') }}"  # SA_PASSWORD stored in environment variable
    mssql_data_volume: "mssql-data"
    mssql_port: 1433

  tasks:
    # Step 1: Install Docker
    - name: Install Docker
      apt:
        name:
          - docker.io
        state: present
        update_cache: yes

    # Step 2: Start and enable Docker service
    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: true

    # Step 3: Run the MSSQL Docker Container
    - name: Run MSSQL Docker Container
      docker_container:
        name: "{{ mssql_container_name }}"
        image: "{{ mssql_image_name }}"
        state: started
        restart_policy: always
        exposed_ports:
          - "{{ mssql_port }}"
        ports:
          - "{{ mssql_port }}:{{ mssql_port }}"
        env:
          ACCEPT_EULA: "Y"
          SA_PASSWORD: "{{ mssql_sa_password }}"
        volumes:
          - "{{ mssql_data_volume }}:/var/opt/mssql"

    # Step 4: Verify the container is running
    - name: Verify running Docker container
      command: docker ps -f "name={{ mssql_container_name }}"
      register: container_status
      failed_when: container_status.stdout == ""

    # Step 5: Check if MSSQL port is mapped correctly
    - name: Check if MSSQL port is mapped
      command: docker port {{ mssql_container_name }}
      register: port_status

    - name: Display port status
      debug:
        msg: "MSSQL port status: {{ port_status.stdout }}"

    # Step 6: Display container running status
    - name: Display running container status
      debug:
        msg: "Container {{ mssql_container_name }} is running successfully."
